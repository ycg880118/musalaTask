(()=>{var e={204:(e,r,t)=>{const a=t(112);r.getAllGateways=async(e,r)=>{try{let e=await a.getGateways();r.status(200).json({result:e})}catch(e){r.status(500).json({error:e.toString()})}},r.getGateway=async(e,r)=>{try{let t=await a.getGateway(e.params._id);t?r.status(200).json({result:t}):r.status(404).json({error:"There is no gateway with the given id"})}catch(e){r.status(500).json({error:e.toString()})}},r.addGateway=async(e,r)=>{try{await a.addGateway(e.body),r.status(200).json({result:`Gateway ${e.body.serialNumber} added successfully`})}catch(e){r.status(500).json({error:e.toString()})}},r.removeGateway=async(e,r)=>{try{await a.removeGateway(e.params._id)?r.status(200).json({result:`Gateway ${e.params._id} removed successfully`}):r.status(404).json({error:"There is no gateway with the given id"})}catch(e){r.status(500).json({error:e.toString()})}}},32:(e,r,t)=>{const a=t(470);r.addPeripheral=async(e,r)=>{try{let t=await a.addPeripheralDevice(e.body);t?r.status(200).json({result:t}):r.status(404).json({error:"There is no gateway with the given id"})}catch(e){r.status(500).json({error:e.toString()})}},r.removePeripheral=async(e,r)=>{try{let t=await a.removePeripheralDevice(e.params);t?r.status(200).json({result:t}):r.status(404).json({error:"There is no gateway with the given id"})}catch(e){r.status(500).json({error:e.toString()})}}},123:(e,r,t)=>{const{Gateway:a}=t(440),{Peripheral:i}=t(355);r.getAllGateways=()=>a.find(),r.getGateway=e=>a.findById(e),r.addGateway=(e,r,t)=>new a({serialNumber:e,name:r,ipv4Address:t}).save(),r.removeGateway=e=>a.findByIdAndRemove(e),r.addPeripheral=(e,r)=>a.findById({_id:r}).then((r=>r?(r.peripheralDevices.push(new i(e)),r.markModified("peripheralDevices"),r.save().then((e=>e))):null)),r.removePeripheral=(e,r)=>{let t={$pull:{peripheralDevices:{_id:r}}};return a.findByIdAndUpdate(e,t).then((()=>a.findById(e)))},r.getgatewayPeripheralsCount=e=>a.findById(e).then((e=>e?e.peripheralDevices.length:0))},440:(e,r,t)=>{const a=t(185),{Schema:i,model:s}=a,o=t(355).Peripheral.schema,n=t(506),d=s("Gateway",new i({serialNumber:{type:String,required:!0,unique:!0},name:{type:String,required:!0},ipv4Address:{type:String,required:!0},peripheralDevices:[o]}));e.exports={Gateway:d,validateGateway:function(e){return n.object({serialNumber:n.string().required(),name:n.string().required(),ipv4Address:n.string().ip({version:["ipv4"]}).required()}).validate(e)},validateId:function(e){return n.object({_id:n.string().hex().length(24)}).validate(e)}}},355:(e,r,t)=>{const a=t(185),{Schema:i,model:s}=a,o=t(506).extend(t(120)),n=s("Peripheral",new i({uid:{type:Number,required:!0},vendor:{type:String,required:!0},date:{type:Date,required:!0},status:{type:String,required:!0}}));e.exports={Peripheral:n,validatePeripheral:function(e){return o.object({uid:o.number().required(),vendor:o.string().required(),date:o.date().format("YYYY-MM-DD").required(),status:o.string().required()}).validate(e)}}},849:(e,r,t)=>{const a=t(860).Router(),i=t(204);a.get("/",i.getAllGateways),a.get("/:_id",i.getGateway),a.post("/",i.addGateway),a.delete("/:_id",i.removeGateway),e.exports=a},873:(e,r,t)=>{const a=t(860).Router(),i=t(32);a.post("/",i.addPeripheral),a.delete("/:gatewayId/:peripheralId",i.removePeripheral),e.exports=a},112:(e,r,t)=>{const a=t(123),{validateGateway:i,validateId:s}=t(440),{validatePeripheral:o}=t(355);r.getGateways=async()=>{try{return await a.getAllGateways()}catch(e){throw new Error("Gateway service error: "+e.toString())}},r.getGateway=async e=>{try{const{error:r}=s({_id:e});if(r)throw new Error("Validation error: "+r.details[0].message);return await a.getGateway(e)}catch(e){throw new Error("Gateway service error: "+e.toString())}},r.addGateway=async e=>{try{const{error:r}=i(e);if(r)throw new Error("Validation error: "+r.details[0].message);return await a.addGateway(e.serialNumber,e.name,e.ipv4Address)}catch(e){throw new Error("Gateway service error: "+e.toString())}},r.removeGateway=async e=>{try{const{error:r}=s({_id:e});if(r)throw new Error("Validation error: "+r.details[0].message);return await a.removeGateway(e)}catch(e){throw new Error("Gateway service error: "+e.toString())}}},470:(e,r,t)=>{const a=t(123),{validateId:i}=t(440),{validatePeripheral:s}=t(355);r.addPeripheralDevice=async e=>{try{const r=s(e.peripheral).error;if(r)throw new Error("Validation error: "+r.details[0].message);const t=i({_id:e.gatewayId}).error;if(t)throw new Error("Validation error: "+t.details[0].message);if(await a.getgatewayPeripheralsCount(e.gatewayId)>=10)throw new Error("Validation error: Only 10 peripheral devices allowed for a gateway");return await a.addPeripheral(e.peripheral,e.gatewayId)}catch(e){throw new Error("Peripheral service error: "+e.toString())}},r.removePeripheralDevice=async e=>{try{const r=i({_id:e.peripheralId}).error;if(r)throw new Error("Validation error: "+r.details[0].message);const t=i({_id:e.gatewayId}).error;if(t)throw new Error("Validation error: "+t.details[0].message);return await a.removePeripheral(e.gatewayId,e.peripheralId)}catch(e){throw new Error("Peripheral service error: "+e.toString())}}},120:e=>{"use strict";e.exports=require("@joi/date")},582:e=>{"use strict";e.exports=require("cors")},142:e=>{"use strict";e.exports=require("dotenv")},860:e=>{"use strict";e.exports=require("express")},506:e=>{"use strict";e.exports=require("joi")},185:e=>{"use strict";e.exports=require("mongoose")},17:e=>{"use strict";e.exports=require("path")}},r={};function t(a){var i=r[a];if(void 0!==i)return i.exports;var s=r[a]={exports:{}};return e[a](s,s.exports,t),s.exports}(()=>{t(142).config();const e=t(860),r=t(185).connect,a=t(17),i=t(582),s=t(849),o=t(873);let n=process.env.PORT||3e3;const d=e();r(process.env.DATABASE_URL).then((()=>console.log("DB is connected"))).catch((e=>console.error(e))),d.use(e.json()),d.use(i()),d.use("/api/gateways",s),d.use("/api/peripherals",o),d.use(e.static(a.join(__dirname,"public"))),d.listen(n,(()=>{console.log(`Server started on port ${n}`)}))})()})();